library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
library(slidify)
setwd("./R_lectures")
setwd("./R_lectures/1. Intro to R")
getwd()
setwd("./R_lectures/1. Intro to R")
dir()
setwd("./R_lectures/1. Intro to R")
setwd("./R_lectures/1 Intro to R")
dir()
setwd("./R_lectures/1_ Intro_to_R")
getwd()
dir()
setwd("./R_lectures/1_Intro_to_R")
setwd("./R_lectures/1_Intro_to_R")
setwd("./R_lectures/1")
setwd("./1 - Intro to R")
getwd
getwd()
setwd("./1 - Intro to R")
getwd()
author("1 - Intro to R")
dir()
setwd("./R_lectures")
author("1 - Intro to R")
library(slidify)
author("1 - Intro to R")
detach("package:slidify", unload=TRUE)
library("slidify", lib.loc="~/R/win-library/3.2")
library(slidify)
library(slidifyLibraries)
library("slidify", lib.loc="~/R/win-library/3.2")
detach("package:slidifyLibraries", unload=TRUE)
detach("package:slidify", unload=TRUE)
library("slidify", lib.loc="~/R/win-library/3.2")
library("slidifyLibraries", lib.loc="~/R/win-library/3.2")
detach("package:slidifyLibraries", unload=TRUE)
detach("package:slidify", unload=TRUE)
library("slidify", lib.loc="~/R/win-library/3.2")
library("slidifyLibraries", lib.loc="~/R/win-library/3.2")
detach("package:slidify", unload=TRUE)
detach("package:slidifyLibraries", unload=TRUE)
install_github("slidifyLibraries","ramnathv")
library(devtools)
install_github("slidifyLibraries","ramnathv")
library("slidifyLibraries", lib.loc="~/R/win-library/3.2")
detach("package:slidifyLibraries", unload=TRUE)
remove.packages("slidifyLibraries", lib="~/R/win-library/3.2")
install_github("slidifyLibraries","ramnathv")
library(slidify)
library(slidifyLibraries)
detach("package:slidify", unload=TRUE)
library("slidify", lib.loc="~/R/win-library/3.2")
library(slidifyLibraries)
library("slidify", lib.loc="~/R/win-library/3.2")
library("slidifyLibraries", lib.loc="~/R/win-library/3.2")
library(rmarkdown)
library(knitr)
is.integer(c(1,2,3))
as.integer(c(1,2,3))
c(FALSE,1,2)
x <- list(5:9,b,a,c, list("four","five"))
1 == "1"
"1" == TRUE
as.logical("1")
c(a = 1, b = 2, c = 3)
a <- matrix(1:12,ncol=4, nrow=3)
a
a:h
rownames(a)
colnames(a)
rownames(a) <- c("A","B","C")
colnames(a) <- c("a","b","c","d")
a
str(a)
library(devtools)
library(slidify)
library(slidifyLibraries)
library(rmarkdown)
library(knitr)
setwd("./R_lectures")
author("2 - Subsetting")
author("1 - Intro to R - Data Structures")
dir()
library(knitr)
opts_chunk$set(cache=TRUE, collapse=TRUE, error=FALSE, prompt=TRUE)
knit_theme$set(thm)
thm <- knit_theme$get("acid")
thm <- knit_theme$get("acid")
library(knitr)
# This sets the chunk default options
opts_chunk$set(cache=TRUE, collapse=TRUE, error=FALSE, prompt=TRUE)
# This sets the chunk display theme
thm <- knit_theme$get("acid")
knit_theme$set(thm)
options(digits=3)
options(width=80)
x[c(-2,4)]
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(-2,4)]
x <- list(a=c(5:9),b=c(TRUE,FALSE,FALSE,TRUE), c=list("four","five"))
x
x[2]
x["b"]
class(x[1])
class(x["a"])
class(x$a)
df <- data.frame(ID = 1:4,
Color = c("red","white","red",NA),
Passed = c(T,T,T,F))
str(df)
df[c("ID","Color")]
str(df[c("ID","Color")])
str(df[c(,"ID","Color")])
str(df[c(,"ID","Color")])
str(df[,c("ID","Color")])
str(df[,c("ID","Color)])
str(df[,c("ID")])
str(df[c("ID")])
mtcars
mtcars[mtcars$cyl = 4, ]
author("3 - Control structures")
library(slidify)
library(slidifyLibraries)
library(rmarkdown)
library(knitr)
author("3 - Control structures")
author("4 - User-written functions")
library(slidify)
library(slidifyLibraries)
library(rmarkdown)
library(knitr)
setwd("./R_lectures")
author("4 - User-written functions")
author("3 - Control structures")
getwd()
install.packages("rCharts")
formals(lm)
formals(plot)
formas(lm)
formals(lm)
names(formals(lm))
names(formals(sum))
names(formals(mean))
names(formals(sd))
names(formals(plot))
names(formals(rnorm)) #argument names of plot function
plot(x=1:20, y= exp(1:20))
plot(1:20,exp(1:20))
plot(1:20,exp(1:20))
plot(x=1:20, y= exp(1:20))
plot(y = exp(1:20),x = 1:20)
plot(y = log(1:20),x = 1:20)
log(1)
formals(par)
plot(y = log(1:20),x = 1:20, pch=18)
```
names(formals(plot)) #argument names of rnorm function
formals(plot)
plot(y = log(1:20),x = 1:20)
names(formals(median)) #argument names of rnorm function
names(formals(plot)) #argument names of rnorm function
plot(1:20,log(1:20))
plot(x = 1:20, y = log(1:20))
args(plot) #argument names of rnorm function
args(lm)
args(plot) #argument names of plot function
days <- c("Monday","Tuesday","Wendsday","Thursday","Friday")
warnings
warnings()
days <- c("Monday","Tuesday","Wendsday","Thursday","Friday")
weekdays
weekdays <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
weekdays
range(weekdays)
seq_along(weekdays)
a <- 1
a <- 1
for(i in 1:3){
a <- a*i
}
print(a)
as.Date("2015-10-01")
x <- rnorm(100)
x <- rnorm(100)
x
if(x>100){}
ifelse(x>100,1,0)
x <- rnorm(n = 1000, mean = 1, sd = 3)
set.seed(123) #Set the seed for the random number generation
x <- rnorm(n = 1000, mean = 1, sd = 3)
set.seed(123) #Set the seed for the random number generation
x <- rnorm(n = 1000, mean = 1, sd = 3)
x
sum(x<=0)
acdata$use
acdata$use
acdata <- read.csv("COL PA MARA.csv")
setwd("C:/Users/Manuel/Dropbox/1. Mis documentos/1. Medicina/R course/data")
acdata <- read.csv("COL PA MARA.csv")
acdata$use
acdata$use=="B"
acdata$valdays
acdata[acdata$valdays <= 5]
mod <- lm(mpg ~ wt, data = mtcars)
mod <- lm(mpg ~ wt, data = mtcars)
mod$df.residual
mtcars  %>% head
str(mtcars)
str(mod)
str(summary(mod))
acdata
ifelse(acdata$valdays >= 4,1,0)
ifelse(acdata$valdays >= 4 | acdata$valwkend >=1,1,0)
sum(ifelse(acdata$valdays >= 4 | acdata$valwkend >=1,1,0))
sum(ifelse(acdata$valdays >= 4,1,0))
sum(ifelse(acdata$valdays >= 4 & acdata$valwkend >=1,1,0))
ifelse(acdata$valdays >= 4 & acdata$valwkend >=1,"valid",0)
install.packages("xtable")
library(xtable)
tab <- data.frame(Operator=c('<','<=','>','>=','==','!=','!x','x | y','x & y'),Description=c('less than
','less than or equal to','greater than','greater than or equal to','exactly equal to','not equal to','Not x','x OR y','x AND y'))
rownames(tab)<- NULL
tab
length()
length(a)
getwd()
getwd()
setwd("./R_lectures")
getwd()
dir()
author("5 - Built-in functions")
library(slidify)
library(slidifyLibraries)
library(rmarkdown)
library(knitr)
author("5 - Built-in functions")
vignette()
vignette(summary)
vignette("summary")
ozone
data(ozone)
datamtcars
data(mtcars)
summary(mtcars)
str(mtcars)
table(mtcars$cyl,mtcars$hp)
str(mtcars)
table(mtcars$cyl,mtcars$am)
??apply
library(help = "base"
)
data(cars)
cars
data(mtcars)
lapply(mtcars,mean)
args(lapply)
sd
?summary
str(summary(mtcars))
lapply(mtcars,mean)
sapply(mtcars,mean)
args(sapply)
sapply(mtcars,mean,simplify = F)
ind <- list(c(1, 2, 2), c("A", "A", "B"))
ind
table(ind)
n <- 17; fac <- factor(rep(1:3, length = n), levels = 1:5)
fac
table(fac)
tapply(1:n, fac, sum)
tapply(1:n, fac, count)
tapply(1:n, fac, n)
tapply(1:n, fac)
tapply(1:n, fac,mean)
args(apply)
apply(mtcars, 2, mean)
apply(mtcars, 2, sort)
```
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
cave <- function(x, c1, c2) c(mean(x[c1]), mean(x[c2]))
apply(x, 1, cave,  c1 = "x1", c2 = c("x1","x2"))
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
apply(x, 1, function(y) y^3+5)
apply(x, 1, function(y) y+5)
apply(x, 2, function(y) y+5)
apply(x, c(1,2), sum)
tapply(mtcars$wt, mtcars$cyl, mean)
barplot(tapply(mtcars$wt, mtcars$cyl, mean))
plot(tapply(mtcars$wt, mtcars$cyl, mean))
barplot(tapply(mtcars$wt, mtcars$cyl, mean))
f <- function(x){}
f <- function(x){return(mean(x),sd(x),min(x),max(x))}
f
f(mtcars$wt)
f
f(mtcars$wt)
f <- function(x){return(c(mean(x),sd(x),min(x),max(x)))}
f
f(mtcars$wt)
tapply(mtcars$wt, mtcars$cyl, f)
as.data.frame(tapply(mtcars$wt, mtcars$cyl, f))
sapply(mtcars,f)
sapply(mtcars$vs,f)
sapply(mtcars[["vs"]],f)
sapply(mtcars["vs"],f)
f(mtcars$vs)
tapply(mtcars$wt, mtcars$cyl, mean)
tapply(mtcars$wt, list(mtcars$cyl,mtcars$am), mean)
tapply(mtcars$wt, list(mtcars$cyl,mtcars$carb), mean)
tapply(mtcars$wt, list(mtcars$cyl,mtcars$carb), mean,na.rm=T)
tapply(mtcars$wt, list(mtcars$cyl,mtcars$carb), mean,rm.na=T)
```
tapply(mtcars$wt, list(mtcars$cyl,mtcars$carb), mean,rm.na=T)
sapply(mtcars,f)
tapply(mtcars$wt,mtcars$cyl,f)
read.csv("./hw/hw1_data.csv")
df <- read.csv("./hw/hw1_data.csv")
df <- read.csv("./hw/hw1_data.csv")
names(df)
tail(df)
tail(df)
df$Ozone[47]
sum(is.na(df$Ozone))
mean(df$Ozone)
mean(df$Ozone,rm.na=T)
mean(df$Ozone,na.rm = T)
subset(df, Ozone>31 & Temp > 90)
sb <- subset(df, Ozone>31 & Temp > 90)
mean(sb$Solar.R)
mean(df[df$Month==6,"Temp"])
max(df[df$Month==5,"Ozone"])
max(df[df$Month==5,"Ozone"],na.rm=T)
tapply(df$Temp, df$Month, mean)
names(df)
str(df)
tapply(df$Temp, list(df$Month,df$Day), mean)
tapply(df$Temp, list(df$Month,df$Day), max)
