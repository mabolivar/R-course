{
    "collab_server" : "",
    "contents" : "---\ntitle       : Introduction to R\nsubtitle    : Data types, subsetting, vectorized operations & packages\nauthor      : Manuel A. Bolivar\njob         :  \nframework   : io2012        # {io2012, html5slides, shower, dzslides, ...}\nhighlighter : highlight.js  # {highlight.js, prettify, highlight}\nhitheme     : zenburn      # \nwidgets     : []            # {mathjax, quiz, bootstrap}\nmode        : selfcontained # {standalone, draft}\nknit        : slidify::knit2slides\n--- \n\n```{r setup, include=FALSE}\n# This is an R setup chunk, containing default options applied to all other chunks\nlibrary(knitr)\n# This sets the chunk default options\nopts_chunk$set(cache=TRUE, collapse=TRUE, error=FALSE, prompt=TRUE)\n# This sets the chunk display theme\nthm <- knit_theme$get(\"acid\")\nknit_theme$set(thm)\n# This sets some display options\noptions(digits=3)\noptions(width=80)\n```\n\n\n## Course outline\n1. Introduction to R\n2. Control structures \n3. R functions \n4. Reading and writing data \n5. Dates & times \n6. Plotting in R \n7. Manipulate \n8. Tidy data \n9. Processing acelerometry data\n\n---\n\n## Session 1 - Outline\n\n1. Introduction to R\n  - What is R?\n  - Data types\n  - Subsetting\n  - Packages\n2. Control structures \n  - `if`, `for` & `while`\n\n\n--- .class #id \n\n\n## What is R?\n\n<center><img src=\"https://www.r-project.org/logo/Rlogo.png\" alt=\"Drawing\" style=\"width: 250px;\"/></center>\n\n+ R is a language and environment for statistical computing and graphics. \n+ R provides a wide variety of statistical (linear and nonlinear modelling, classical statistical tests, time-series analysis, classification, clustering, ...) and graphical techniques.\n\n\n--- \n\n## Why should we learn R?\n\n\n+ Open source\n+ Cross-platform compatible\n+ Advance statistical language\n+ Outstanding graphs\n+ Built-in modules\n+ Extensible\n+ Vast community \n+ Short program length\n+ Widely supported (Books, web pages, etc)\n\n---\n\n## RStudio\n\nRStudio is an IDE that makes R easier to use and more productive.\n\n<center><img src=\"https://www.rstudio.com/wp-content/uploads/2014/04/rstudio-windows.png\" alt=\"RStudio\" style=\"width: 600px;\"/></center>\n\n---\n\n## Data types & data structures\n\n**R** has a wide variety of **data types**:\n\n+ Numeric\n+ String\n+ Logical (True/False)\n+ Date\n\nAnd **data structures**:\n\n+ Vectors\n+ Lists\n+ Factors\n+ Matrices\n+ Data frames\n\n\n---\n\n## Vector\n\nThe basic data structure in R is the vector.\n  + All elements must be the same type.\n  + Created with `c()` (combine).\n\n```{r vectors1}\n#Numeric vector\na <- c(1,2,3,6,-2,4)\n\n#Character vector\nb <- c(\"one\",\"two\",\"three\")\n\n#logical vector\nc <- c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE)\n```\n\n---\n\n## Vector\n\nVectors have three common properties\n + `typeof()`: what it is.\n + `length()`: how many elements contains.\n + `attributes`: additionally arbitrary data.\n\n```{r vectors3}\na\ntypeof(a)\nlength(a)\nattributes(a)\n```\n\n---\n\n## Vector\n\nGiven a vector, you can ask if correspond to certain type:\n + `is.numeric()`\n + `is.integer()`\n + `is.character()`\n + `is.logical()`\n \n```{r}\nis.character(a)\nis.numeric(a)\n```\n\n---\n\n## Vector coercion\n\nQ: What happend if you attempt to combine different elements types in one vector?\n\n```{r, echo=TRUE, results=\"hide\"}\n c(FALSE,1,2)\n```\n\n```{r, echo=TRUE, results=\"hide\"}\n c(1,2,\"three\")\n```\n\n```{r, echo=TRUE, results=\"hide\"}\n c(FALSE,3,\"two\")\n```\n\n---\n\n## Vector coercion\n\nA: They will be coerced to the most **flexible type**.\n\n<center>logical `<` integer `<` double `<` character\n</center>\n\n```{r, echo=TRUE}\n c(FALSE,1,2)\n```\n\n```{r, echo=TRUE}\n c(1,2,\"three\")\n```\n\n```{r, echo=TRUE}\n c(FALSE,3,\"two\")\n```\n\n---\n\n## Extra: The `str()` function\n\n+ `str()` is short for instruction.\n+ `str()` provides a human readable description of any R data structure.\n\n```{r, echo=TRUE}\n str(c(FALSE,1,2))\n```\n\n```{r, echo=TRUE}\n str(c(1,2,\"three\"))\n```\n\n```{r, echo=TRUE}\n str(c(FALSE,3,\"two\"))\n```\n\n---\n\n## Lists\n\nList can contain elements of any type, including lists.\n  + Use `list()` to construct lists.\n  + Some built-in functions returns lists as output.\n  \n```{r}\nx <- list(5:9,a,b,c, list(\"four\",\"five\"))\n```\n\nWhat is going to return the command `str(x)`?\n\n---\n\n## Lists\n\nList can contain elements of any type, including lists.\n  + Use `list()` to construct lists.\n  + Some built-in functions returns lists as output.\n  \n```{r}\nx <- list(5:9,a,b,c, list(\"four\",\"five\"))\n```\n\nWhat is going to return the command `str(x)`?\n\n```{r, echo=F}\nstr(x)\n```\n\n---\n\n## Factors\n\nA factor is a vector that can contain only predefined values, and is used to store categorical data (Wickham, 2014).\n\n```{r}\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n```\n\n---\n\n## Factors\n\nA factor is a vector that can contain only predefined values, and is used to store categorical data (Wickham, 2014).\n\n```{r}\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n```\n\n```{r}\nclass(x)\nlevels(x)\n```\n\n---\n\n## Factors\n\nA factor is a vector that can contain only predefined values, and is used to store categorical data (Wickham, 2014).\n\n```{r}\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n```\n\n```{r}\nclass(x)\nlevels(x)\n```\n\n```{r}\nstr(x)\n```\n\n---\n\n## Matrices\n\n+ Adding a dim() attribute to a vector allows it to behave like a multi-dimensional array (matrix).\n+ Matrices are created with `matrix()`.\n\n```{r}\n#A matrix of 3x4 dimensions\na <- matrix(1:12,ncol=4, nrow=3)\na\n```\n\n---\n\n## Matrices\n\n+ Adding a dim() attribute to a vector allows it to behave like a multi-dimensional array (matrix).\n+ Matrices are created with `matrix()`.\n\n```{r}\n#A matrix of 3x4 dimensions\na <- matrix(1:12,ncol=4, nrow=3)\na\n```\n\n```{r}\n#A second matrix\nb <- 1:12\ndim(b) <- c(3,4)\n```\n\nAre matrices `a` and `b` equal?\n\n---\n\n\n## Arrays\n\n+ An array is matrix of more than two dimensions.\n+ Arrays are created with `array()`.\n\n```{r}\nc <- array(1:12, c(2, 3, 2))\nc\n```\n\n---\n\n## Names and dimensions\n\n+ `nrow()` and `ncol()` return the number of rows and columns for a matrix respectively.\n+ `dim()` \"returns\" the dimensions of an array (including matrices)\n\n```{r}\nnrow(a)\nncol(a)\ndim(c)\n```\n\nWhat do `length()` and `dim()` return when they are applied to a matrix?\n\n---\n\n## Names and dimensions\n\n+ `nrow()` and `ncol()` return the number of rows and columns for a matrix respectively.\n+ `dim()` \"returns\" the dimensions of an array (including matrices)\n\n```{r}\nnrow(a)\nncol(a)\ndim(c)\n```\n\nWhat do `length()` and `dim()` return when they are applied to a matrix?\n```{r}\nlength(a)\ndim(a)\n```\n\n---\n\n## Names and dimensions\n\n+ `rownames()` and `colnames()` \"return\" row an column names.\n+ `dimnames()` \"returns\" a list of character vectors for arrays.\n\n```{r, results=\"hide\"}\nrownames(a)\n```\n\n```{r, results=\"hide\"}\ncolnames(a)\n```\n\n---\n\n## Names and dimensions\n\n+ `rownames()` and `colnames()` \"return\" row an column names.\n+ `dimnames()` \"returns\" a list of character vectors for arrays.\n\n```{r}\nrownames(a)\n```\n\n```{r}\ncolnames(a)\n```\n\n---\n\n## Names and dimensions\n\n+ `rownames()` and `colnames()` \"return\" row an column names.\n+ `dimnames()` \"returns\" a list of character vectors for arrays.\n\n```{r}\nrownames(a) <- c(\"A\",\"B\",\"C\")\ncolnames(a) <- c(\"a\",\"b\",\"c\",\"d\")\n```\n\n```{r, results=\"hide\"}\na\n```\n\n---\n\n## Names and dimensions\n\n+ `rownames()` and `colnames()` \"return\" row an column names.\n+ `dimnames()` \"returns\" a list of character vectors for arrays.\n\n```{r}\nrownames(a) <- c(\"A\",\"B\",\"C\")\ncolnames(a) <- c(\"a\",\"b\",\"c\",\"d\")\n```\n\n```{r}\na\n```\n\n```{r, results=\"hide\"}\nstr(a)\n```\n\n---\n\n## Names and dimensions\n\n+ `rownames()` and `colnames()` \"return\" row an column names.\n+ `dimnames()` \"returns\" a list of character vectors for arrays.\n\n```{r}\nrownames(a) <- c(\"A\",\"B\",\"C\")\ncolnames(a) <- c(\"a\",\"b\",\"c\",\"d\")\n```\n\n```{r}\na\n```\n\n```{r}\nstr(a)\n```\n\n---\n\n## Data frames\n\nA data frame is the most common way of storing data in R, and if used systematically makes data analysis easier.\n\n + A data frame is a list of equal-length vectors.\n + This makes it a 2-dimensional structure, so it shares properties of matrices and lists.\n + The data frames have `names()`, `colnames()`, `rownames()`, `ncol()`, and `nrow()`. \n\n---\n\n## Data frames\n\n`data.frame()` takes vectors as input and creates data.frames.\n\n```{r}\ndf <- data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\"))\n```\n\n---\n\n## Data frames\n\n`data.frame()` takes vectors as input and creates data.frames.\n\n```{r}\ndf <- data.frame(x = 1:3, y = c(\"a\", \"b\", \"c\"))\n```\n\n```{r}\ndf\n```\n\n+ How are they similar to matrices?\n+ How are similar to lists? \n  (Hint: `str()`)\n\n--- \n\n## Data frames with factors\n\n+ `data.frame` convert character vectors into factors by default.\n+ To avoid this, you can use `stringAsFactors = FALSE`.\n\n\n```{r}\ndf <- data.frame(\n  x = 1:3, y = c(\"a\", \"b\", \"c\"))\nstr(df)\n```\n\n```{r}\ndf <- data.frame(\n  x = 1:3, y = c(\"a\", \"b\", \"c\"),\n  stringsAsFactors = FALSE)\nstr(df)\n```\n\n---\n\n## Coersion\n\nYou can coerce an object to a data frame with `as.data.frame()`:\n\n+ A vector will create a one-column data frame.\n+ A list will create one column for each element; it’s an error if they’re not all the same length.\n+ A matrix will create a data frame with the same number of columns and rows as the matrix.\n\nLets try:\n\n```{r}\nx <- as.data.frame(a)\n```\n\n---\n\n## Coersion\n\nYou can coerce an object to a data frame with `as.data.frame()`:\n\n+ A vector will create a one-column data frame.\n+ A list will create one column for each element; it’s an error if they’re not all the same length.\n+ A matrix will create a data frame with the same number of columns and rows as the matrix.\n\nLets try:\n\n```{r}\nx <- as.data.frame(a)\n```\n\n```{r}\nx\n```\n\n---\n\n## Combining data frames\n\nData frames con be combined using `cbind()` or `rbind()`.\n\n```{r, results=\"hide\"}\ncbind(df, data.frame(z = 3:1))\n```\n\n```{r, results = \"hide\"}\nrbind(df, data.frame(x=10,y = \"z\"))\n```\n\n---\n\n## Combining data frames\n\nData frames con be combined using `cbind()` or `rbind`.\n\n```{r}\ncbind(df, data.frame(z = 3:1))\n```\n\n```{r}\nrbind(df, data.frame(x=10,y = \"z\"))\n```\n\n---\n\n## Exercises\n\n1. If `is.matrix(x)` is TRUE, what will `is.array(x)` return?\n2. What does `as.matrix()` do when applied to a data frame with columns of different types?\n3. Given two vectors `a = c(1:3)` and `b = c(\"a\",\"b\",\"c\")`, if I want to build a data.frame maintaining the vectors' orginal data types, should I combine them first and them turn them as data.frame or visceversa? (Hint: `cbind()`)\n\n\n",
    "created" : 1456179561817.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "426737741",
    "id" : "12AE048",
    "lastKnownWriteTime" : 1456203159,
    "last_content_update" : 1456203159619,
    "path" : "C:/Users/Manuel/Dropbox/1. Mis documentos/1. Medicina/R course/R_lectures/1 - Intro to R/index.Rmd",
    "project_path" : "R_lectures/1 - Intro to R/index.Rmd",
    "properties" : {
        "docOutlineVisible" : "0",
        "source_window_id" : ""
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}